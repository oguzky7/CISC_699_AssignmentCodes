Data Parsing:
It is typically better for the boundary object to prepare the data in a structured and validated format before passing it to the control object. The control object then processes this structured input with its own logic.

Thus, your intuition is correct: if the boundary object only passes plain data without preparation, it defeats the purpose of having this object. Its role is to reduce noise and handle any preliminary validation or formatting so the controller can focus on the core business logic.

Summary of Responsibilities:
Boundary Object: Collects, validates, and structures data from the user.
Control Object: Executes business logic, interacts with entities and repositories, and handles errors or notifications.
Boundary objects should handle parsing and basic structuring, not leave it all for the control object. If the boundary object is just "sending the data," it isn't fulfilling its role properly.


Data Parsing:
It is typically better for the boundary object to prepare the data in a structured and validated format before passing it to the control object. The control object then processes this structured input with its own logic.

Thus, your intuition is correct: if the boundary object only passes plain data without preparation, it defeats the purpose of having this object. Its role is to reduce noise and handle any preliminary validation or formatting so the controller can focus on the core business logic.

Summary of Responsibilities:
Boundary Object: Collects, validates, and structures data from the user.
Control Object: Executes business logic, interacts with entities and repositories, and handles errors or notifications.
Boundary objects should handle parsing and basic structuring, not leave it all for the control object. If the boundary object is just "sending the data," it isn't fulfilling its role properly.


Please read and understand this and save it to your brain and memory.
so you know I have this now.
from DataObjects.global_vars import GlobalState 

GlobalState.user_message


So I want boundary object to handle the input user is sending.
so if I write
!launch_browser
it should send "launch_browser" to control.

if I write
!check_availability https://www.opentable.com/r/bar-spero-washington/ "September 20"
it should send 
"check_availability" as command
"https://www.opentable.com/r/bar-spero-washington/" as url
"September 20" as date


if I write 
!navigate_to_website
it should send 
"check_availability" as command
"empty string  as url

if I write 
!navigate_to_website google.com
it should send 
"check_availability" as command
"google.com" as url
